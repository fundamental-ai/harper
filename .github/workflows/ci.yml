name: Test Harper Python Bindings

on:
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'harper-py/**'
      - '.github/workflows/ci.yml'
  push:
    branches: [ main, master, develop ]
    paths:
      - 'harper-py/**'
      - '.github/workflows/ci.yml'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          harper-py/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest maturin

    - name: Build and install harper-py
      working-directory: harper-py
      run: |
        maturin develop --release

    - name: Run tests
      working-directory: harper-py
      run: |
        python -m pytest tests/ -v --tb=short

    - name: Test import in clean environment
      run: |
        python -c "import harper_py; print('✓ Import successful'); linter = harper_py.HarperLinter(); print('✓ Linter creation successful'); print(f'✓ Version: {harper_py.__version__}')"

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Check Rust formatting
      working-directory: harper-py
      run: cargo fmt -- --check

    - name: Run Clippy
      working-directory: harper-py
      run: cargo clippy -- -D warnings

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8

    - name: Check Python formatting with Black
      working-directory: harper-py
      run: black --check tests/

    - name: Run Flake8
      working-directory: harper-py
      run: flake8 tests/ --max-line-length=88 --extend-ignore=E203,W503

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.16.2

    - name: Build wheels
      working-directory: harper-py
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_SKIP: "cp36-* cp37-* pp*"  # Skip Python 3.6, 3.7, and PyPy
        CIBW_ARCHS_MACOS: "x86_64 arm64"
        CIBW_ARCHS_LINUX: "x86_64"
        CIBW_ARCHS_WINDOWS: "AMD64"

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}
        path: harper-py/wheelhouse/*.whl